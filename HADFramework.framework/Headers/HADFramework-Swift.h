// Generated by Apple Swift version 3.1 (swiftlang-802.0.51 clang-802.0.41)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
@import AVFoundation;
@import CoreFoundation;
@import QuartzCore;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
typedef SWIFT_ENUM(NSInteger, BannerTemplateCustomClickModes) {
  BannerTemplateCustomClickModesWholeBanner = 0,
  BannerTemplateCustomClickModesButton = 1,
};

@class RPCircularProgress;
@class NSCoder;

SWIFT_CLASS("_TtC12HADFramework15CloseButtonView")
@interface CloseButtonView : UIView
@property (nonatomic, strong) RPCircularProgress * _Nullable progress;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
@end

@class UITouch;
@class UIEvent;

/// A star rating view that can be used to show customer rating for the products. On can select stars by tapping on them when updateOnTouch settings is true. An optional text can be supplied that is shown on the right side.
/// Example:
/// cosmosView.rating = 4
/// cosmosView.text = “(123)”
/// Shows: ★★★★☆ (132)
SWIFT_CLASS("_TtC12HADFramework10CosmosView")
@interface CosmosView : UIView
/// The currently shown number of stars, usually between 1 and 5. If the value is decimal the stars will be shown according to the Fill Mode setting.
@property (nonatomic) double rating;
/// Currently shown text. Set it to nil to display just the stars without text.
@property (nonatomic, copy) NSString * _Nullable text;
/// Draws the stars when the view comes out of storyboard with default settings
- (void)awakeFromNib;
/// Initializes and returns a newly allocated cosmos view object.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated cosmos view object with the specified frame rectangle.
/// \param frame The frame rectangle for the view.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated cosmos view object.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Updates the stars and optional text based on current values of <code>rating</code> and <code>text</code> properties.
- (void)update;
/// Returns the content size to fit all the star and text layers.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Called by the system in accessibility voice-over mode when the value is incremented by the user.
- (void)accessibilityIncrement;
/// Called by the system in accessibility voice-over mode when the value is decremented by the user.
- (void)accessibilityDecrement;
/// Closure will be called when user touches the cosmos view. The touch rating argument is passed to the closure.
@property (nonatomic, copy) void (^ _Nullable didTouchCosmos)(double);
/// Closure will be called when the user lifts finger from the cosmos view. The touch rating argument is passed to the closure.
@property (nonatomic, copy) void (^ _Nullable didFinishTouchingCosmos)(double);
/// Overriding the function to detect the first touch gesture.
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Overriding the function to detect touch move.
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Detecting event when the user lifts their finger.
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Increase the hitsize of the view if it’s less than 44px for easier touching.
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Draw the stars in interface buidler
- (void)prepareForInterfaceBuilder;
@end


SWIFT_CLASS("_TtC12HADFramework13EqualizerView")
@interface EqualizerView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


///
SWIFT_CLASS("_TtC12HADFramework3HAD")
@interface HAD : NSObject
+ (void)create SWIFT_DEPRECATED;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

///
typedef SWIFT_ENUM(NSInteger, HADAdContent) {
  HADAdContentTitle = 0,
  HADAdContentDescription = 1,
  HADAdContentBanner = 2,
  HADAdContentIcon = 3,
  HADAdContentVideo = 4,
};

@class NSError;
@class UIImage;

SWIFT_CLASS("_TtC12HADFramework10HADAdImage")
@interface HADAdImage : NSObject
/// Typed access to the image url.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (void)loadImageAsyncWithBlockWithCompletion:(void (^ _Nullable)(NSError * _Nullable, UIImage * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

///
typedef SWIFT_ENUM(NSInteger, HADAdOrientation) {
  HADAdOrientationPortrait = 0,
  HADAdOrientationLandscape = 1,
};

enum HADUserGender : NSInteger;

SWIFT_CLASS("_TtC12HADFramework12HADAdRequest")
@interface HADAdRequest : NSObject
/// Set custom parameters for sending to HyperADX
/// \param params A dictionary of [String:String] type
///
- (void)setCustomParamsWithParams:(NSDictionary<NSString *, NSString *> * _Nonnull)params;
/// Set custom parameter for sending to HyperADX
/// \param key The key of param as String
///
/// \param value the value of param as String
///
- (void)setCustomParamWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// Set user’s age parameter for sending to HyperADX
/// \param value The user’s age as Int
///
- (void)setAgeWithValue:(NSInteger)value;
/// Set user’s year of birth parameter for sending to HyperADX
/// \param value The user’s year of birth as Int
///
- (void)setYearOfBirthWithValue:(NSInteger)value;
/// Set user’s gender of birth parameter for sending to HyperADX
/// \param value The user’s gender of birth as HADUserGender
///
- (void)setGenderWithValue:(enum HADUserGender)value;
/// Set keywords parameter for sending to HyperADX
/// \param value The keywords as String
///
- (void)setKeywordsWithValue:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the ad size.
typedef SWIFT_ENUM(NSInteger, HADAdSize) {
/// Represents the flexible banner ad size, where banner width depends on
/// its container width, and banner height is fixed as 50pt/90pt/250pt
  HADAdSizeHeight250Rectangle = 0,
/// Represents the flexible banner ad size, where banner width depends on
/// its container width, and banner height is fixed as 50pt/90pt/250pt
  HADAdSizeHeight50Banner = 1,
/// Represents the flexible banner ad size, where banner width depends on
/// its container width, and banner height is fixed as 50pt/90pt/250pt
  HADAdSizeHeight90Banner = 2,
};

///
typedef SWIFT_ENUM(NSInteger, HADAdType) {
  HADAdTypeNative = 0,
  HADAdTypeHtml = 1,
  HADAdTypeInterstitial = 2,
  HADAdTypeBanner = 3,
  HADAdTypeVideo = 4,
  HADAdTypeNative_video = 5,
  HADAdTypeRewarded_video = 6,
};

@class UIViewController;
@protocol HADAdViewDelegate;

SWIFT_CLASS("_TtC12HADFramework9HADAdView")
@interface HADAdView : UIView
/// Typed access to the id of the ad placement.
@property (nonatomic, readonly, copy) NSString * _Nullable placementID;
@property (nonatomic, readonly, strong) UIViewController * _Nullable rootViewController;
/// The HADAdRequest object contains custom params
@property (nonatomic, strong) HADAdRequest * _Nullable adRequest;
/// the delegate
@property (nonatomic, weak) id <HADAdViewDelegate> _Nullable delegate;
/// Value interval of auto refreshing call for the instance in seconds, default = 60 sec, min = 30 sec, max = 120 sec
/// See disableAutoRefresh() also
@property (nonatomic) uint32_t autoRefreshTime;
/// This is a method to disable auto refresh for the HADAdView instance
/// By default, the refresh interval is equal to 60 sec.
/// Once you call this method, the auto refresh will be disabled for this HADAdView instance,
/// and you cannot re-enable the refresh for this instance. A new created HADAdView will still
/// use the default behavior.
- (void)disableAutoRefresh;
/// This is a method to initialize an HADAdView matching the given placement id.
/// \param placementID The id of the ad placement. You can create your placement id from HyperADX developers page.
///
/// \param adSize The size of the ad; for example, .height50Banner or .height90Banner.
///
/// \param viewController The view controller that will be used to present the ad and the app store view.
///
- (nonnull instancetype)initWithPlacementID:(NSString * _Nonnull)placementID adSize:(enum HADAdSize)adSize viewController:(UIViewController * _Nullable)viewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Begins loading the HADAdView content.
/// You can implement <code>hadViewDidLoad:</code> and <code>hadViewDidFail:withError:</code> methods
/// of <code>HADAdViewDelegate</code> if you would like to be notified as loading succeeds or fails.
- (void)loadAd;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class HADNativeAd;

/// The methods declared by the HADNativeAdDelegate protocol allow the adopting delegate to respond to messages
/// from the HADNativeAd class and thus respond to operations such as whether the native ad has been loaded.
SWIFT_PROTOCOL("_TtP12HADFramework19HADNativeAdDelegate_")
@protocol HADNativeAdDelegate
@optional
/// Sent when an HADNativeAd has been successfully loaded.
/// \param nativeAd An HADNativeAd object sending the message.
///
- (void)hadNativeAdDidLoadWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
/// Sent after an ad has been clicked by the person.
/// \param nativeAd An HADNativeAd object sending the message.
///
- (void)hadNativeAdDidClickWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
/// Sent when an HADNativeAd is failed to load.
/// \param nativeAd An HADNativeAd object sending the message.
///
/// \param error An error object containing details of the error.
///
- (void)hadNativeAdDidFailWithNativeAd:(HADNativeAd * _Nonnull)nativeAd withError:(NSError * _Nullable)error;
/// Sent immediately before the impression of an HADNativeAd object will be logged.
/// \param nativeAd An FBNativeAd object sending the message.
///
- (void)hadNativeAdWillLogImpressionWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
- (void)HADNativeAdDidFailWithNativeAd:(HADNativeAd * _Nonnull)nativeAd error:(NSError * _Nonnull)error SWIFT_DEPRECATED_MSG("Use `hadNativeAdDidFail:withError` instead");
- (void)HADNativeAdDidLoadWithNativeAd:(HADNativeAd * _Nonnull)nativeAd SWIFT_DEPRECATED_MSG("Use `hadNativeAdDidLoad` instead");
- (void)HADNativeAdDidClickWithNativeAd:(HADNativeAd * _Nonnull)nativeAd SWIFT_DEPRECATED_MSG("Use `hadNativeAdDidClick` instead");
@end


@interface HADAdView (SWIFT_EXTENSION(HADFramework)) <HADNativeAdDelegate>
- (void)hadNativeAdDidLoadWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
- (void)hadNativeAdDidClickWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
- (void)hadNativeAdDidFailWithNativeAd:(HADNativeAd * _Nonnull)nativeAd withError:(NSError * _Nullable)error;
@end


/// The methods declared by the HADAdDelegate protocol allow the adopting delegate to respond
/// to messages from the HADAdView class and thus respond to operations such as whether the ad has
/// been loaded, the person has clicked the ad.
SWIFT_PROTOCOL("_TtP12HADFramework17HADAdViewDelegate_")
@protocol HADAdViewDelegate
@optional
/// Sent after an FBAdView fails to load the ad.
/// \param adView An HADAdView object sending the message.
///
/// \param error An error object containing details of the error.
///
- (void)hadViewDidFailWithAdView:(HADAdView * _Nonnull)adView withError:(NSError * _Nullable)error;
/// Sent when an ad has been successfully loaded.
/// \param adView An HADAdView object sending the message.
///
- (void)hadViewDidLoadWithAdView:(HADAdView * _Nonnull)adView;
/// Sent after an ad has been clicked by the person.
/// \param adView An HADAdView object sending the message.
///
- (void)hadViewDidClickWithAdView:(HADAdView * _Nonnull)adView;
@end

@protocol HADBannerAdDelegate;
enum HADBannerAdSize : NSInteger;

/// Banner ad class
SWIFT_CLASS("_TtC12HADFramework11HADBannerAd")
@interface HADBannerAd : UIView
/// The HADAdRequest object contains custom params
@property (nonatomic, strong) HADAdRequest * _Nullable adRequest;
/// Typed access to the id of the ad placement.
@property (nonatomic, readonly, copy) NSString * _Nullable placementId;
@property (nonatomic, readonly, strong) UIViewController * _Nullable rootViewController;
/// The delegate
@property (nonatomic, weak) id <HADBannerAdDelegate> _Nullable delegate;
/// This is a method to initialize a HADBannerAd object matching the given placement id.
/// \param placementId The id of the ad placement. You can create your placement id from HyperADX developers page.
///
/// \param bannerSize The size of banner HADBannerAdSize
///
/// \param viewController The view controller that will be used to present the ad and the app store view.
///
- (nonnull instancetype)initWithPlacementID:(NSString * _Nonnull)placementID bannerSize:(enum HADBannerAdSize)bannerSize viewController:(UIViewController * _Nullable)viewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Begins loading the HADBannerAd content.
/// You can implement <code>bannerAdDidLoad:</code> and <code>bannerAdDidFail:withError:</code> methods
/// of <code>HADBannerAdDelegate</code> if you would like to be notified as loading succeeds or fails.
- (void)loadAd;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface HADBannerAd (SWIFT_EXTENSION(HADFramework))
@end


@interface HADBannerAd (SWIFT_EXTENSION(HADFramework))
@end


/// The methods declared by the HADNativeAdDelegate protocol allow the adopting delegate to respond to messages
/// from the HADNativeAd class and thus respond to operations such as whether the native ad has been loaded.
SWIFT_PROTOCOL("_TtP12HADFramework19HADBannerAdDelegate_")
@protocol HADBannerAdDelegate
@optional
/// Sent when an HADBannerAd has been successfully loaded.
/// \param nativeAd An HADBannerAd object sending the message.
///
- (void)hadBannerAdDidLoadWithBannerAd:(HADBannerAd * _Nonnull)bannerAd;
/// Sent after an ad has been clicked by the person.
/// \param nativeAd An HADBannerAd object sending the message.
///
- (void)hadBannerAdDidClickWithBannerAd:(HADBannerAd * _Nonnull)bannerAd;
/// Sent when an HADBannerAd is failed to load.
/// \param nativeAd An HADBannerAd object sending the message.
///
/// \param error An error object containing details of the error.
///
- (void)hadBannerAdDidFailWithBannerAd:(HADBannerAd * _Nonnull)bannerAd withError:(NSError * _Nullable)error;
/// Sent immediately before the impression of an HADBannerAd object will be logged.
/// \param nativeAd An HADBannerAd object sending the message.
///
- (void)hadBannerAdWillLogImpressionWithBannerAd:(HADBannerAd * _Nonnull)bannerAd;
@end

/// Represents the ad size.
typedef SWIFT_ENUM(NSInteger, HADBannerAdSize) {
  HADBannerAdSizeBanner300x250 = 0,
  HADBannerAdSizeBanner728x90 = 1,
  HADBannerAdSizeBanner320x50 = 2,
  HADBannerAdSizeBanner320x480 = 3,
  HADBannerAdSizeBanner480x320 = 4,
  HADBannerAdSizeBanner1024x768 = 5,
  HADBannerAdSizeBanner768x1024 = 6,
};

typedef SWIFT_ENUM(NSInteger, HADBannerSize) {
  HADBannerSizeBlock300x250 = 0,
  HADBannerSizeHeight50 = 1,
  HADBannerSizeHeight90 = 2,
};

typedef SWIFT_ENUM(NSInteger, HADBannerTemplateTypes) {
  HADBannerTemplateTypesBlockOne = 0,
  HADBannerTemplateTypesBlockTwo = 1,
  HADBannerTemplateTypesBlockThree = 2,
  HADBannerTemplateTypesLineOne = 3,
  HADBannerTemplateTypesLineTwo = 4,
  HADBannerTemplateTypesLineThree = 5,
};

@protocol HADBannerTemplateViewDelegate;
@class UIColor;

/// Banner template view
SWIFT_CLASS("_TtC12HADFramework21HADBannerTemplateView")
@interface HADBannerTemplateView : UIView
/// The HADAdRequest object contains custom params
@property (nonatomic, strong) HADAdRequest * _Nullable adRequest;
///
@property (nonatomic) BOOL refresh;
///
@property (nonatomic) uint32_t refreshTime;
///
- (void)drawRect:(CGRect)rect;
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
///
- (void)removeFromSuperview;
///
- (void)loadAdWithPlacementId:(NSString * _Nonnull)placementId bannerTemplate:(enum HADBannerTemplateTypes)bannerTemplate delegate:(id <HADBannerTemplateViewDelegate> _Nullable)delegate;
///
- (void)layoutSubviews;
///
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
///
@property (nonatomic, strong) UIColor * _Nullable customTitleTextColor;
///
@property (nonatomic, strong) UIColor * _Nullable customDescriptionTextColor;
///
@property (nonatomic, strong) UIColor * _Nullable customPoweredByTextColor;
///
@property (nonatomic, strong) UIColor * _Nullable customAgeRatingTextColor;
///
@property (nonatomic, strong) UIColor * _Nullable customAgeRatingBackgroundColor;
///
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
///
@property (nonatomic, strong) UIColor * _Nullable customBackgroundColor;
///
@property (nonatomic) CGFloat customBannerCornerRadius;
///
@property (nonatomic) CGFloat customIconCornerRadius;
///
@property (nonatomic) CGFloat customAgeRatingCornerRadius;
///
@property (nonatomic) CGFloat customButtonCornerRadius;
///
@property (nonatomic, strong) UIColor * _Nullable customButtonTitleColor;
///
@property (nonatomic, strong) UIColor * _Nullable customButtonBackgroundColor;
///
@property (nonatomic, strong) UIColor * _Nullable customButtonBorderColor;
///
@property (nonatomic) CGFloat customButtonBorderWidth;
///
- (void)setButtonSideMarginsWithMargin:(CGFloat)margin;
///
@property (nonatomic, strong) UIColor * _Nullable customStarRatingTextColor;
///
@property (nonatomic, strong) UIColor * _Nullable customStarRatingFilledColor;
///
@property (nonatomic, strong) UIColor * _Nullable customStarRatingEmptyColor;
///
@property (nonatomic) enum BannerTemplateCustomClickModes customClickMode;
@end


SWIFT_PROTOCOL("_TtP12HADFramework29HADBannerTemplateViewDelegate_")
@protocol HADBannerTemplateViewDelegate
@optional
- (void)hadTemplateViewDidFailWithTemplateView:(HADBannerTemplateView * _Nonnull)templateView withError:(NSError * _Nullable)error;
- (void)hadTemplateViewDidLoadWithTemplateView:(HADBannerTemplateView * _Nonnull)templateView;
- (void)hadTemplateViewDidClickWithTemplateView:(HADBannerTemplateView * _Nonnull)templateView;
- (void)HADTemplateViewWithView:(HADBannerTemplateView * _Nonnull)view didFailWithError:(NSError * _Nullable)error SWIFT_DEPRECATED_MSG("Use hadTemplateViewDidFail:withError instead");
- (void)HADTemplateViewDidLoadWithView:(HADBannerTemplateView * _Nonnull)view SWIFT_DEPRECATED_MSG("Use hadTemplateViewDidLoad instead");
- (void)HADTemplateViewDidClickWithView:(HADBannerTemplateView * _Nonnull)view SWIFT_DEPRECATED_MSG("Use hadTemplateViewDidClick instead");
@end

@protocol HADBannerViewDelegate;

/// Banner view
SWIFT_CLASS("_TtC12HADFramework13HADBannerView")
@interface HADBannerView : UIView
/// The HADAdRequest object contains custom params
@property (nonatomic, strong) HADAdRequest * _Nullable adRequest;
///
@property (nonatomic) uint32_t refreshTime;
///
- (void)drawRect:(CGRect)rect;
///
- (nonnull instancetype)init:(NSString * _Nonnull)placementId adSize:(enum HADBannerSize)adSize root:(id <HADBannerViewDelegate> _Nullable)root OBJC_DESIGNATED_INITIALIZER;
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
///
- (void)removeFromSuperview;
///
- (void)loadAdWithPlacementId:(NSString * _Nonnull)placementId bannerSize:(enum HADBannerSize)bannerSize delegate:(id <HADBannerViewDelegate> _Nullable)delegate;
/// Load banner ad.
- (void)loadAd;
///
- (void)layoutSubviews;
///
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP12HADFramework21HADBannerViewDelegate_")
@protocol HADBannerViewDelegate
@optional
- (void)HADViewWithView:(HADBannerView * _Nonnull)view didFailWithError:(NSError * _Nullable)error SWIFT_DEPRECATED_MSG("Use hadViewDidFail instead");
- (void)HADViewDidLoadWithView:(HADBannerView * _Nonnull)view SWIFT_DEPRECATED_MSG("Use hadViewDidLoad instead");
- (void)HADViewDidClickWithView:(HADBannerView * _Nonnull)view SWIFT_DEPRECATED_MSG("Use hadViewDidClick instead");
@end

enum HADEventType : NSInteger;

/// HAD Event manager
SWIFT_CLASS("_TtC12HADFramework15HADEventManager")
@interface HADEventManager : NSObject
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HADEventManager * _Nonnull sharedInstance;)
+ (HADEventManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
///
- (void)setupWithToken:(NSString * _Nonnull)token;
///
- (void)sendWithType:(enum HADEventType)type;
@end

///
typedef SWIFT_ENUM(NSInteger, HADEventType) {
  HADEventTypeRegistration = 101,
  HADEventTypeLogin = 102,
  HADEventTypeOpen = 103,
  HADEventTypeAddToWishlist = 201,
  HADEventTypeAddToCart = 202,
  HADEventTypeAddedPaymentInfo = 203,
  HADEventTypeReservation = 204,
  HADEventTypeCheckoutInitiated = 205,
  HADEventTypePurchase = 206,
  HADEventTypeSearch = 301,
  HADEventTypeContentView = 302,
  HADEventTypeTutorialCompleted = 401,
  HADEventTypeLevelAchieved = 402,
  HADEventTypeAchievementUnlocked = 403,
  HADEventTypeSpentCredit = 404,
  HADEventTypeInvite = 501,
  HADEventTypeRated = 502,
  HADEventTypeShare = 503,
};

@class NSBundle;

SWIFT_CLASS("_TtC12HADFramework28HADFullscreenVideoController")
@interface HADFullscreenVideoController : UIViewController
@property (nonatomic, copy) NSString * _Nullable ctaLabel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)placePlayerView;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface HADFullscreenVideoController (SWIFT_EXTENSION(HADFramework))
@end

@protocol HADInterstitialDelegate;

/// Interstitial view controller implementation
SWIFT_CLASS("_TtC12HADFramework15HADInterstitial")
@interface HADInterstitial : UIViewController <HADNativeAdDelegate>
///
@property (nonatomic, strong) id <HADInterstitialDelegate> _Nullable delegate;
///
- (nonnull instancetype)initWithPlacementId:(NSString * _Nonnull)placementId OBJC_DESIGNATED_INITIALIZER;
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
///
- (void)setPlacementIdWithPlacementId:(NSString * _Nonnull)placementId;
///
- (void)viewDidLoad;
///
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
///
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
///
- (void)viewWillAppear:(BOOL)animated;
///
- (void)viewWillDisappear:(BOOL)animated;
///
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
///
- (void)loadAd;
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
///
- (void)HADNativeAdDidLoadWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
///
- (void)HADNativeAdDidClickWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
///
- (void)HADAd:(HADNativeAd * _Nonnull)nativeAd didFailWithError:(NSError * _Nonnull)error;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol HADInterstitialAdDelegate;

/// Interstitial view controller implementation
SWIFT_CLASS("_TtC12HADFramework17HADInterstitialAd")
@interface HADInterstitialAd : UIViewController
/// The HADAdRequest object contains custom params
@property (nonatomic, strong) HADAdRequest * _Nullable adRequest;
/// The delegate
@property (nonatomic, weak) id <HADInterstitialAdDelegate> _Nullable delegate;
/// Typed access to the id of the ad placement.
@property (nonatomic, readonly, copy) NSString * _Nullable placementId;
/// This is a method to initialize an HADInterstitialAd matching the given placement id.
/// \param placementID The id of the ad placement. You can create your placement id from HyperADX developers page.
///
- (nonnull instancetype)initWithPlacementID:(NSString * _Nonnull)placementID OBJC_DESIGNATED_INITIALIZER;
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
///
- (void)viewDidLoad;
///
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
///
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
///
- (void)viewWillAppear:(BOOL)animated;
///
- (void)viewWillDisappear:(BOOL)animated;
///
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Begins loading the HADInterstitialAd content.
/// You can implement <code>hadInterstitialAdDidLoad:</code> and <code>hadInterstitialAdDidFail:withError:</code> methods
/// of <code>HADInterstitialAdDelegate</code> if you would like to be notified as loading succeeds or fails.
- (void)loadAd;
/// Presents the interstitial ad modally from the specified view controller.
/// You can implement <code>hadInterstitialAdDidClick:</code>, <code>hadInterstitialAdWillClose:</code> and <code>hadInterstitialAdWillClose</code>
/// methods of <code>HADInterstitialAdDelegate</code> if you would like to stay informed for thoses events
/// \param controller The view controller that will be used to present the interstitial ad.
///
- (void)showAdFromRootViewController:(UIViewController * _Nonnull)controller;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class HADMediaView;

///
SWIFT_PROTOCOL("_TtP12HADFramework20HADMediaViewDelegate_")
@protocol HADMediaViewDelegate
@optional
- (void)hadMediaViewDidFailWithMediaView:(HADMediaView * _Nonnull)mediaView withError:(NSError * _Nullable)error;
- (void)hadMediaViewDidLoadWithMediaView:(HADMediaView * _Nonnull)mediaView;
- (void)hadMediaViewDidStartPlayingVideoWithMediaView:(HADMediaView * _Nonnull)mediaView;
- (void)hadMediaViewDidEndPlayingVideoWithMediaView:(HADMediaView * _Nonnull)mediaView;
- (void)hadMediaViewDidChangeTimeWithMediaView:(HADMediaView * _Nonnull)mediaView progress:(float)progress;
@end


@interface HADInterstitialAd (SWIFT_EXTENSION(HADFramework)) <HADMediaViewDelegate>
- (void)hadMediaViewDidLoadWithMediaView:(HADMediaView * _Nonnull)mediaView;
@end


@interface HADInterstitialAd (SWIFT_EXTENSION(HADFramework)) <HADNativeAdDelegate>
- (void)hadNativeAdDidLoadWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
- (void)hadNativeAdDidClickWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
- (void)hadNativeAdDidFailWithNativeAd:(HADNativeAd * _Nonnull)nativeAd withError:(NSError * _Nullable)error;
@end


@interface HADInterstitialAd (SWIFT_EXTENSION(HADFramework))
@end


/// The methods declared by the HADInterstitialAdDelegate protocol allow the adopting delegate to respond
/// to messages from the HADInterstitialAd class and thus respond to operations such as whether the
/// interstitial ad has been loaded, user has clicked or closed the interstitial.
SWIFT_PROTOCOL("_TtP12HADFramework25HADInterstitialAdDelegate_")
@protocol HADInterstitialAdDelegate
@optional
/// Sent when an HADInterstitialAd failes to load an ad.
/// \param interstitialAd An HADInterstitialAd object sending the message.
///
/// \param error An error object containing details of the error.
///
- (void)hadInterstitialAdDidFailWithInterstitialAd:(HADInterstitialAd * _Nonnull)interstitialAd withError:(NSError * _Nullable)error;
/// Sent when an HADInterstitialAd successfully loads an ad.
/// \param interstitialAd An HADInterstitialAd object sending the message.
///
- (void)hadInterstitialAdDidLoadWithInterstitialAd:(HADInterstitialAd * _Nonnull)interstitialAd;
/// Sent after an ad in the HADInterstitialAd object is clicked. The appropriate app store view or
/// app browser will be launched.
/// \param interstitialAd An HADInterstitialAd object sending the message.
///
- (void)hadInterstitialAdDidClickWithInterstitialAd:(HADInterstitialAd * _Nonnull)interstitialAd;
/// Sent after an HADInterstitialAd object has been dismissed from the screen, returning control
/// to your application.
/// \param interstitialAd An HADInterstitialAd object sending the message.
///
- (void)hadInterstitialAdDidCloseWithInterstitialAd:(HADInterstitialAd * _Nonnull)interstitialAd;
/// Sent immediately before an HADInterstitialAd object will be dismissed from the screen.
/// \param interstitialAd An HADInterstitialAd object sending the message.
///
- (void)hadInterstitialAdWillCloseWithInterstitialAd:(HADInterstitialAd * _Nonnull)interstitialAd;
- (void)hadInterstitialAdWillLogImpressionWithInterstitialAd:(HADInterstitialAd * _Nonnull)interstitialAd;
@end


///
SWIFT_PROTOCOL("_TtP12HADFramework23HADInterstitialDelegate_")
@protocol HADInterstitialDelegate
@optional
- (void)HADInterstitialDidFailWithController:(HADInterstitial * _Nonnull)controller error:(NSError * _Nullable)error;
- (void)HADInterstitialDidLoadWithController:(HADInterstitial * _Nonnull)controller;
- (void)HADInterstitialDidClickWithController:(HADInterstitial * _Nonnull)controller;
- (void)HADInterstitialDidCloseWithController:(HADInterstitial * _Nonnull)controller;
- (void)HADInterstitialWillCloseWithController:(HADInterstitial * _Nonnull)controller;
@end

typedef SWIFT_ENUM(NSInteger, HADMediaType) {
  HADMediaTypeImage = 0,
  HADMediaTypeVideo = 1,
};


///
SWIFT_CLASS("_TtC12HADFramework12HADMediaView")
@interface HADMediaView : UIView
- (nonnull instancetype)initWithNativeAd:(HADNativeAd * _Nonnull)nativeAd OBJC_DESIGNATED_INITIALIZER;
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setNativeAdWithNativeAd:(HADNativeAd * _Nullable)nativeAd;
- (void)drawRect:(CGRect)rect;
- (void)loadHADBannerWithNativeAd:(HADNativeAd * _Nullable)nativeAd animated:(BOOL)animated completion:(void (^ _Nullable)(NSError * _Nullable, UIImage * _Nullable))completion SWIFT_DEPRECATED_MSG("Use `setNativeAd` instead");
///
- (void)loadHADIconWithNativeAd:(HADNativeAd * _Nullable)nativeAd animated:(BOOL)animated completion:(void (^ _Nullable)(NSError * _Nullable, UIImage * _Nullable))completion SWIFT_DEPRECATED_MSG("Use `icon.loadImageAsyncWithBlock` instead");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface HADMediaView (SWIFT_EXTENSION(HADFramework)) <AVAssetResourceLoaderDelegate>
@end


@interface HADMediaView (SWIFT_EXTENSION(HADFramework))
@end


@interface HADMediaView (SWIFT_EXTENSION(HADFramework))
@end


enum HADNativeAdsCachePolicy : NSInteger;
@class UIImageView;

/// Native ad class
SWIFT_CLASS("_TtC12HADFramework11HADNativeAd")
@interface HADNativeAd : NSObject
/// The HADAdRequest object contains custom params
@property (nonatomic, strong) HADAdRequest * _Nullable adRequest;
/// Call isAdValid to check whether native ad is valid & internal consistent prior rendering using its properties. If
/// rendering is done as part of the loadAd callback, it is guarantee to be consistent
@property (nonatomic, readonly) BOOL adValid;
/// The delegate
@property (nonatomic, weak) id <HADNativeAdDelegate> _Nullable delegate;
/// Set the native ad caching policy. This controls which media (images, video, etc) from the native ad are cached before the native ad calls nativeAdLoaded on its delegate. The default is to not block on caching. Ensure that media is loaded through HADMediaView or through [HADAdImage loadImageAsyncWithBlock:] to take full advantage of caching.
@property (nonatomic) enum HADNativeAdsCachePolicy mediaCachePolicy;
/// Typed access to the ad cover image creative. See <code>HADAdImage</code> for details.
@property (nonatomic, readonly, strong) HADAdImage * _Nullable cover;
/// Typed access to the ad icon. See <code>HADAdImage</code> for details.
@property (nonatomic, readonly, strong) HADAdImage * _Nullable icon;
/// Typed access to the id of the ad placement.
@property (nonatomic, readonly, copy) NSString * _Nullable placementId;
/// Typed access to the ad title.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Typed access to the body text, usually a longer description of the ad.
@property (nonatomic, readonly, copy) NSString * _Nullable body;
/// deprecated
@property (nonatomic, readonly, copy) NSString * _Nullable ratingsCount;
/// Typed access to the call to action phrase of the ad, for example “Install Now”.
@property (nonatomic, readonly, copy) NSString * _Nullable callToAction;
@property (nonatomic) BOOL allowVideo;
/// This is a method to initialize a HADNativeAd object matching the given placement id.
/// \param placementId The id of the ad placement. You can create your placement id from HyperADX developers page.
///
- (nonnull instancetype)initWithPlacementId:(NSString * _Nonnull)placementId OBJC_DESIGNATED_INITIALIZER;
/// Begins loading the HADNativeAd content.
/// You can implement <code>nativeAdDidLoad:</code> and <code>nativeAdDidFail:withError:</code> methods
/// of <code>HADNativeAdDelegate</code> if you would like to be notified as loading succeeds or fails.
- (void)loadAd;
/// This is a method to associate a HADNativeAd with the UIView you will use to display the native ads.
/// The whole area of the UIView will be clickable.
/// \param view The UIView you created to render all the native ads data elements.
///
/// \param viewController The UIViewController that will be used to present SKStoreProductViewController
/// (iTunes Store product information) or the in-app browser. If nil is passed, the top view controller currently shown will be used.
///
- (void)registerViewForInteractionWithAdView:(UIView * _Nonnull)adView withViewController:(UIViewController * _Nullable)controller;
/// This is a method to associate HADNativeAd with the UIView you will use to display the native ads
/// and set clickable areas.
/// \param view The UIView you created to render all the native ads data elements.
///
/// \param viewController The UIViewController that will be used to present SKStoreProductViewController
/// (iTunes Store product information). If nil is passed, the top view controller currently shown will be used.
///
/// \param clickableViews An array of UIView you created to render the native ads data element, e.g.
/// CallToAction button, Icon image, which you want to specify as clickable.
///
- (void)registerViewForInteractionWithAdView:(UIView * _Nonnull)adView withViewController:(UIViewController * _Nullable)controller withClickableViews:(NSArray<UIView *> * _Nonnull)clickableViews;
/// This is a method to disconnect a HADNativeAd with the UIView you used to display the native ads.
- (void)unregisterView;
- (void)handleClick SWIFT_DEPRECATED_MSG("Use `registerViewForInteraction:withViewController` instead");
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED;
- (void)loadIconInto:(UIImageView * _Nonnull)imageView animated:(BOOL)animated SWIFT_DEPRECATED_MSG("Use `loadImageAsyncWithBlock` instead");
- (void)loadBannerInto:(UIImageView * _Nonnull)imageView animated:(BOOL)animated SWIFT_DEPRECATED_MSG("Use `HADMediaView.setNativeAd` instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface HADNativeAd (SWIFT_EXTENSION(HADFramework))
@end


@interface HADNativeAd (SWIFT_EXTENSION(HADFramework))
@end

@class HADNativeAdsManager;
@class UICollectionView;

/// Additional functionality on top of HADNativeAdsManager to assist in using native ads within a UICollectionView. This class contains a mechanism to map indexPaths to native ads in a stable manner as well as helpers which assist in doing the math to include ads at a regular interval within a collection view.
SWIFT_CLASS("_TtC12HADFramework35HADNativeAdCollectionViewAdProvider")
@interface HADNativeAdCollectionViewAdProvider : NSObject
/// Passes delegate methods from FBNativeAd. Separate delegate calls will be made for each native ad contained.
@property (nonatomic, weak) id <HADNativeAdDelegate> _Nullable delegate;
/// Create a HADNativeAdCollectionViewAdProvider.
/// \param manager The HADNativeAdsManager which is consumed by this class.
///
- (nonnull instancetype)initWithManager:(HADNativeAdsManager * _Nonnull)manager OBJC_DESIGNATED_INITIALIZER;
/// Retrieve a native ad for an indexPath, will return the same ad for a given indexPath until the native ads manager is refreshed. This method is intended for usage with a collection view and specifically the caller is recommended to wait until  collectionView:cellForRowAt: to ensure getting the best native ad for the given collection cell.
/// \param collectionView The collectionView where native ad will be used
///
/// \param indexPath The indexPath to use as a key for this native ad
///
///
/// returns:
/// A FBNativeAd which is loaded and ready to be used.
- (HADNativeAd * _Nullable)nativeAdWithCollectionView:(UICollectionView * _Nonnull)collectionView forIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Support for evenly distributed native ads within a collection view. Computes whether this cell is an ad or not.
/// \param indexPath The indexPath of the cell within the collection view
///
/// \param stride The frequency that native ads are to appear within the collection view
///
///
/// returns:
/// Boolean indicating whether the cell at the path is an ad
- (BOOL)isAdCellWithIndexPath:(NSIndexPath * _Nonnull)indexPath forStride:(NSInteger)stride SWIFT_WARN_UNUSED_RESULT;
/// Support for evenly distributed native ads within a collection view. Adjusts a non-ad cell indexPath to the indexPath it would be in a collection with no ads.
/// \param indexPath The indexPath to of the non-ad cell
///
/// \param stride The frequency that native ads are to appear within the collection view
///
///
/// returns:
/// An indexPath adjusted to what it would be in a collection view with no ads
- (NSIndexPath * _Nullable)adjustNonAdCellWithIndexPath:(NSIndexPath * _Nonnull)indexPath forStride:(NSInteger)stride SWIFT_WARN_UNUSED_RESULT;
/// Support for evenly distributed native ads within a collection view. Adjusts the total count of cells within the collection view to account for the ad cells.
/// \param count The count of cells in the table view not including ads
///
/// \param stride The frequency that native ads are to appear within the collection view
///
///
/// returns:
/// The total count of cells within the collection view including both ad and non-ad cells
- (NSInteger)adjustCountWithCount:(NSInteger)count forStride:(NSInteger)stride SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum HADNativeAdViewType : NSInteger;
@class HADNativeAdViewAttributes;
@class UICollectionViewCell;

/// Class which assists in putting HADNativeAdViews into UICollectionViews. This class manages the creation of UICollectionViewCells which host native ad views. Functionality is provided to create UICollectionCellViews as needed for a given indexPath as well as computing the height of the cells.
SWIFT_CLASS("_TtC12HADFramework37HADNativeAdCollectionViewCellProvider")
@interface HADNativeAdCollectionViewCellProvider : HADNativeAdCollectionViewAdProvider
/// Method to create a FBNativeAdCollectionViewCellProvider.
/// \param manager The native ad manager consumed by this provider
///
/// \param type The type of this native ad template. For more information, consult <code>HADNativeAdViewType</code>
///
- (nonnull instancetype)initWithManager:(HADNativeAdsManager * _Nonnull)manager forType:(enum HADNativeAdViewType)type OBJC_DESIGNATED_INITIALIZER;
/// Method to create a FBNativeAdCollectionViewCellProvider.
/// \param manager The naitve ad manager consumed by this provider
///
/// \param type The type of this native ad template. For more information, consult HADNativeAdViewType
///
/// \param attributes The layout of this native ad template. For more information, consult HADNativeAdViewLayout
///
- (nonnull instancetype)initWithManager:(HADNativeAdsManager * _Nonnull)manager forType:(enum HADNativeAdViewType)type forAttributes:(HADNativeAdViewAttributes * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
/// Helper method for implementors of UICollectionViewDataSource who would like to host native ad UICollectionViewCells in their collection view.
- (UICollectionViewCell * _Nullable)cellOf:(UICollectionView * _Nonnull)collectionView forRowAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Helper method for implementors of UICollectionViewDelegate who would like to host native ad UICollectionViewCells in their collection view.
- (CGSize)sizeOf:(UICollectionView * _Nonnull)collectionView forRowAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithManager:(HADNativeAdsManager * _Nonnull)manager SWIFT_UNAVAILABLE;
@end


@class UITableView;

/// Additional functionality on top of HADNativeAdsManager to assist in using native ads within a UITableView. This class contains a mechanism to map indexPaths to native ads in a stable manner as well as helpers which assist in doing the math to include ads at a regular interval within a table view.
SWIFT_CLASS("_TtC12HADFramework30HADNativeAdTableViewAdProvider")
@interface HADNativeAdTableViewAdProvider : NSObject
/// Passes delegate methods from FBNativeAd. Separate delegate calls will be made for each native ad contained.
@property (nonatomic, weak) id <HADNativeAdDelegate> _Nullable delegate;
/// Create a HADNativeAdTableViewAdProvider.
/// \param manager The HADNativeAdsManager which is consumed by this class.
///
- (nonnull instancetype)initWithManager:(HADNativeAdsManager * _Nonnull)manager OBJC_DESIGNATED_INITIALIZER;
/// Retrieve a native ad for an indexPath, will return the same ad for a given indexPath until the native ads manager is refreshed. This method is intended for usage with a table view and specifically the caller is recommended to wait until tableView:cellForRowAt: to ensure getting the best native ad for the given table cell.
/// \param tableView The tableView where native ad will be used
///
/// \param indexPath The indexPath to use as a key for this native ad
///
///
/// returns:
/// A HADNativeAd which is loaded and ready to be used.
- (HADNativeAd * _Nullable)nativeAdWithTableView:(UITableView * _Nonnull)tableView forIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Support for evenly distributed native ads within a table view. Computes whether this cell is an ad or not.
/// \param indexPath The indexPath of the cell within the table view
///
/// \param stride The frequency that native ads are to appear within the table view
///
///
/// returns:
/// Boolean indicating whether the cell at the path is an ad
- (BOOL)isAdCellWithIndexPath:(NSIndexPath * _Nonnull)indexPath forStride:(NSInteger)stride SWIFT_WARN_UNUSED_RESULT;
/// Support for evenly distributed native ads within a table view. Adjusts a non-ad cell indexPath to the indexPath it would be in a collection with no ads.
/// \param indexPath The indexPath to of the non-ad cell
///
/// \param stride The frequency that native ads are to appear within the table view
///
///
/// returns:
/// An indexPath adjusted to what it would be in a table view with no ads
- (NSIndexPath * _Nullable)adjustNonAdCellWithIndexPath:(NSIndexPath * _Nonnull)indexPath forStride:(NSInteger)stride SWIFT_WARN_UNUSED_RESULT;
/// Support for evenly distributed native ads within a table view. Adjusts the total count of cells within the table view to account for the ad cells.
/// \param count The count of cells in the table view not including ads
///
/// \param stride The frequency that native ads are to appear within the table view
///
///
/// returns:
/// The total count of cells within the table view including both ad and non-ad cells
- (NSInteger)adjustCountWithCount:(NSInteger)count forStride:(NSInteger)stride SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UITableViewCell;

/// Class which assists in putting FBNativeAdViews into UITableViews. This class manages the creation of UITableViewCells which host native ad views. Functionality is provided to create UITableCellViews as needed for a given indexPath as well as computing the height of the cells.
SWIFT_CLASS("_TtC12HADFramework32HADNativeAdTableViewCellProvider")
@interface HADNativeAdTableViewCellProvider : HADNativeAdTableViewAdProvider
/// Method to create a HADNativeAdTableViewCellProvider.
/// \param manager The naitve ad manager consumed by this provider
///
/// \param type The type of this native ad template. For more information, consult HADNativeAdViewType
///
- (nonnull instancetype)initWithManager:(HADNativeAdsManager * _Nonnull)manager forType:(enum HADNativeAdViewType)type OBJC_DESIGNATED_INITIALIZER;
/// Method to create a HADNativeAdTableViewCellProvider.
/// \param manager The naitve ad manager consumed by this provider
///
/// \param type The type of this native ad template. For more information, consult HADNativeAdViewType
///
/// \param attributes The layout of this native ad template. For more information, consult HADNativeAdViewLayout
///
- (nonnull instancetype)initWithManager:(HADNativeAdsManager * _Nonnull)manager forType:(enum HADNativeAdViewType)type forAttributes:(HADNativeAdViewAttributes * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
/// Helper method for implementors of UITableViewDataSource who would like to host native ad UITableViewCells in their table view.
- (UITableViewCell * _Nullable)cellOf:(UITableView * _Nonnull)tableView forRowAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Helper method for implementors of UITableViewDelegate who would like to host native ad UITableViewCells in their table view.
- (CGFloat)heightOf:(UITableView * _Nonnull)tableView forRowAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Helper method for implementors of UITableViewDelegate who would like to host native ad UITableViewCells in their table view.
- (CGFloat)estimatedHeightOf:(UITableView * _Nonnull)tableView forRowAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithManager:(HADNativeAdsManager * _Nonnull)manager SWIFT_UNAVAILABLE;
@end


/// The HADNativeAdView creates prebuilt native ad template views and manages native ads.
SWIFT_CLASS("_TtC12HADFramework15HADNativeAdView")
@interface HADNativeAdView : UIView
/// This is a method to create a native ad template using the given placement id and type.
/// \param nativeAd The native ad to use to create this view.
///
/// \param type The type of this native ad template. For more information, consult HADNativeAdViewType.
///
+ (HADNativeAdView * _Nonnull)nativeAdViewWithNativeAd:(HADNativeAd * _Nonnull)nativeAd withType:(enum HADNativeAdViewType)type SWIFT_WARN_UNUSED_RESULT;
/// This is a method to create a native ad template using the given placement id and type.
/// \param nativeAd The native ad to use to create this view.
///
/// \param type The type of this native ad template. For more information, consult HADNativeAdViewType.
///
/// \param attributes The attributes to render this native ad template with.
///
+ (HADNativeAdView * _Nonnull)nativeAdViewWithNativeAd:(HADNativeAd * _Nonnull)nativeAd withType:(enum HADNativeAdViewType)type withAttributes:(HADNativeAdViewAttributes * _Nonnull)attrs SWIFT_WARN_UNUSED_RESULT;
- (void)didMoveToSuperview;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIFont;

/// Describes the look and feel of a native ad view.
SWIFT_CLASS("_TtC12HADFramework25HADNativeAdViewAttributes")
@interface HADNativeAdViewAttributes : NSObject
/// Background color of the native ad view.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Color of the title label.
@property (nonatomic, strong) UIColor * _Nullable titleColor;
/// Font of the title label.
@property (nonatomic, strong) UIFont * _Nullable titleFont;
/// Color of the description label.
@property (nonatomic, strong) UIColor * _Nullable descriptionColor;
/// Font of the description label.
@property (nonatomic, strong) UIFont * _Nullable descriptionFont;
/// Background color of the call to action button.
@property (nonatomic, strong) UIColor * _Nullable buttonColor;
/// Color of the call to action button’s title label.
@property (nonatomic, strong) UIColor * _Nullable buttonTitleColor;
/// Font of the call to action button’s title label.
@property (nonatomic, strong) UIFont * _Nullable buttonTitleFont;
/// Border color of the call to action button. If nil, no border is shown.
@property (nonatomic, strong) UIColor * _Nullable buttonBorderColor;
/// Returns default attributes for a given type.
/// \param type The type for this layout.
///
+ (HADNativeAdViewAttributes * _Nonnull)defaultAttributesForTypeWithType:(enum HADNativeAdViewType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Determines the type of native ad template. Different views are created
/// for different values of HADNativeAdViewType
typedef SWIFT_ENUM(NSInteger, HADNativeAdViewType) {
  HADNativeAdViewTypeHeight100 = 0,
  HADNativeAdViewTypeHeight120 = 1,
  HADNativeAdViewTypeHeight300 = 2,
  HADNativeAdViewTypeHeight400 = 3,
};

///
typedef SWIFT_ENUM(NSInteger, HADNativeAdsCachePolicy) {
  HADNativeAdsCachePolicyNone = 0,
  HADNativeAdsCachePolicyIcon = 1,
  HADNativeAdsCachePolicyCoverImage = 2,
  HADNativeAdsCachePolicyVideo = 3,
  HADNativeAdsCachePolicyAll = 4,
};

@protocol HADNativeAdsManagerDelegate;

/// This class provides a mechanism to fetch a set of ads and then use them within your application. The recommended usage is to call nextNativeAd: at the moment when you are about to render an ad. The native ads manager supports giving out as many ads as needed by cloning over the set of ads it got back from the server which can be useful for feed scenarios.
SWIFT_CLASS("_TtC12HADFramework19HADNativeAdsManager")
@interface HADNativeAdsManager : NSObject
/// The HADAdRequest object contains custom params
@property (nonatomic, strong) HADAdRequest * _Nullable adRequest;
/// The delegate
@property (nonatomic, weak) id <HADNativeAdsManagerDelegate> _Nullable delegate;
/// Set the native ads manager caching policy. This controls which media from the native ads are cached before the native ads manager calls nativeAdsLoaded on its delegate. The default is to not block on caching.
@property (nonatomic) enum HADNativeAdsCachePolicy mediaCachePolicy;
/// Returns YES after nativeAdsLoaded: message has been sent.
@property (nonatomic, readonly) BOOL valid;
/// Retrieve the next native ad to be used from the batch. It is highly recommended that the caller wait until immediately before rendering the ad content to call this method to ensure the best ad for the given context is used. If more than uniqueNativeAdCount ads are requested cloned ads will be returned. Periodically the native ads manager will refresh and new ads will be returned.
/// Return a HADNativeAd which is loaded and ready to be used.
@property (nonatomic, readonly, strong) HADNativeAd * _Nullable nextNativeAd;
/// Initialize the native ads manager.
/// \param placementId The id of the ad placement. You can create your placement id from Facebook developers page.
///
/// \param numAdsRequested The number of ads you would like the native ads manager to retrieve.
///
- (nonnull instancetype)initWithPlacementId:(NSString * _Nonnull)placementId numAdsRequested:(NSInteger)numAdsRequested OBJC_DESIGNATED_INITIALIZER;
/// The method that kicks off the loading of ads. It may be called again in the future to refresh the ads manually.
- (void)loadAds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface HADNativeAdsManager (SWIFT_EXTENSION(HADFramework)) <HADNativeAdDelegate>
- (void)hadNativeAdDidLoadWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
- (void)hadNativeAdDidFailWithNativeAd:(HADNativeAd * _Nonnull)nativeAd withError:(NSError * _Nullable)error;
@end


/// Messages from HADNativeAdsManager indicating success or failure loading ads.
SWIFT_PROTOCOL("_TtP12HADFramework27HADNativeAdsManagerDelegate_")
@protocol HADNativeAdsManagerDelegate
@optional
/// When the HADNativeAdsManager has finished loading a batch of ads this message will be sent. A batch of ads may be loaded in response to calling loadAds or due to an automatic refresh by the HADNativeAdsManager. At the point this message is fired all of the native ads will already be loaded and will not hence send their own nativeAdLoad: or hadNativeAdDidFail:withError: message.
- (void)nativeAdsLoaded;
/// When the HADNativeAdsManager has reached a failure while attempting to load a batch of ads this message will be sent to the application.
/// \param error An NSError object with information about the failure.
///
- (void)nativeAdsFailedToLoadWithError:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC12HADFramework9HADReward")
@interface HADReward : NSObject
- (NSString * _Nullable)getLabel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

///
typedef SWIFT_ENUM(NSInteger, HADUserGender) {
  HADUserGenderMale = 0,
  HADUserGenderFemale = 1,
};


/// Video fullscreen class
SWIFT_CLASS("_TtC12HADFramework18HADVideoFullscreen")
@interface HADVideoFullscreen : UIViewController
/// Typed access to the id of the ad placement.
@property (nonatomic, readonly, copy) NSString * _Nullable placementId;
/// The HADAdRequest object contains custom params
@property (nonatomic, strong) HADAdRequest * _Nullable adRequest;
/// This is a method to initialize an HADInterstitialAd matching the given placement id.
/// \param placementID The id of the ad placement. You can create your placement id from HyperADX developers page.
///
- (nonnull instancetype)initWithPlacementID:(NSString * _Nonnull)placementID OBJC_DESIGNATED_INITIALIZER;
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
///
- (void)viewDidLoad;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
///
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Check if an ad is currently ready to display.
@property (nonatomic) BOOL isReadyForDisplay;
/// Begins loading the HADInterstitialAd content.
/// You can implement <code>hadInterstitialAdDidLoad:</code> and <code>hadInterstitialAdDidFail:withError:</code> methods
/// of <code>HADInterstitialAdDelegate</code> if you would like to be notified as loading succeeds or fails.
- (void)loadAd;
/// Presents the interstitial ad modally from the specified view controller.
/// \param controller The view controller that will be used to present the interstitial ad.
///
- (void)showAdFromRootViewController:(UIViewController * _Nonnull)controller;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface HADVideoFullscreen (SWIFT_EXTENSION(HADFramework)) <HADNativeAdDelegate>
- (void)hadNativeAdDidLoadWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
- (void)hadNativeAdDidClickWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
- (void)hadNativeAdDidFailWithNativeAd:(HADNativeAd * _Nonnull)nativeAd withError:(NSError * _Nullable)error;
@end


@interface HADVideoFullscreen (SWIFT_EXTENSION(HADFramework)) <HADMediaViewDelegate>
- (void)hadMediaViewDidFailWithMediaView:(HADMediaView * _Nonnull)mediaView withError:(NSError * _Nullable)error;
- (void)hadMediaViewDidLoadWithMediaView:(HADMediaView * _Nonnull)mediaView;
- (void)hadMediaViewDidStartPlayingVideoWithMediaView:(HADMediaView * _Nonnull)mediaView;
- (void)hadMediaViewDidEndPlayingVideoWithMediaView:(HADMediaView * _Nonnull)mediaView;
- (void)hadMediaViewDidChangeTimeWithMediaView:(HADMediaView * _Nonnull)mediaView progress:(float)progress;
@end

@protocol HADVideoInterstitialAdDelegate;

/// Video interstitial ad class
SWIFT_CLASS("_TtC12HADFramework22HADVideoInterstitialAd")
@interface HADVideoInterstitialAd : UIViewController
/// Typed access to the id of the ad placement.
@property (nonatomic, readonly, copy) NSString * _Nullable placementId;
/// The HADAdRequest object contains custom params
@property (nonatomic, strong) HADAdRequest * _Nullable adRequest;
/// The delegate
@property (nonatomic, weak) id <HADVideoInterstitialAdDelegate> _Nullable delegate;
/// Check if an ad is currently ready to display.
@property (nonatomic) BOOL isReadyForDisplay;
/// This is a method to initialize an HADInterstitialAd matching the given placement id.
/// \param placementID The id of the ad placement. You can create your placement id from HyperADX developers page.
///
- (nonnull instancetype)initWithPlacementID:(NSString * _Nonnull)placementID OBJC_DESIGNATED_INITIALIZER;
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
///
- (void)viewDidLoad;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
///
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Begins loading the HADInterstitialAd content.
/// You can implement <code>hadInterstitialAdDidLoad:</code> and <code>hadInterstitialAdDidFail:withError:</code> methods
/// of <code>HADInterstitialAdDelegate</code> if you would like to be notified as loading succeeds or fails.
- (void)loadAd;
/// Presents the interstitial ad modally from the specified view controller.
/// You can implement <code>hadInterstitialAdDidClick:</code>, <code>hadInterstitialAdWillClose:</code> and <code>hadInterstitialAdWillClose</code>
/// methods of <code>HADInterstitialAdDelegate</code> if you would like to stay informed for thoses events
/// \param controller The view controller that will be used to present the interstitial ad.
///
- (void)showAdFromRootViewController:(UIViewController * _Nonnull)controller;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface HADVideoInterstitialAd (SWIFT_EXTENSION(HADFramework)) <HADNativeAdDelegate>
- (void)hadNativeAdDidLoadWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
- (void)hadNativeAdDidClickWithNativeAd:(HADNativeAd * _Nonnull)nativeAd;
- (void)hadNativeAdDidFailWithNativeAd:(HADNativeAd * _Nonnull)nativeAd withError:(NSError * _Nullable)error;
@end


@interface HADVideoInterstitialAd (SWIFT_EXTENSION(HADFramework)) <HADMediaViewDelegate>
- (void)hadMediaViewDidFailWithMediaView:(HADMediaView * _Nonnull)mediaView withError:(NSError * _Nullable)error;
- (void)hadMediaViewDidLoadWithMediaView:(HADMediaView * _Nonnull)mediaView;
- (void)hadMediaViewDidStartPlayingVideoWithMediaView:(HADMediaView * _Nonnull)mediaView;
- (void)hadMediaViewDidEndPlayingVideoWithMediaView:(HADMediaView * _Nonnull)mediaView;
- (void)hadMediaViewDidChangeTimeWithMediaView:(HADMediaView * _Nonnull)mediaView progress:(float)progress;
@end


/// The methods declared by the HADVideoInterstitialAdDelegate protocol allow the adopting delegate to respond
/// to messages from the HADVideoInterstitialAd class and thus respond to operations such as whether the
/// interstitial ad has been loaded, user has clicked or closed the interstitial.
SWIFT_PROTOCOL("_TtP12HADFramework30HADVideoInterstitialAdDelegate_")
@protocol HADVideoInterstitialAdDelegate
@optional
/// Sent when an HADVideoInterstitialAd failes to load an ad.
/// \param ad An HADVideoInterstitialAd object sending the message.
///
/// \param error An error object containing details of the error.
///
- (void)hadVideoInterstitialAdDidFailWithAd:(HADVideoInterstitialAd * _Nonnull)ad withError:(NSError * _Nullable)error;
/// Sent when an HADVideoInterstitialAd successfully loads an ad.
/// \param ad An HADInterstitialAd object sending the message.
///
- (void)hadVideoInterstitialAdDidLoadWithAd:(HADVideoInterstitialAd * _Nonnull)ad;
/// Sent after an ad in the HADVideoInterstitialAd object is clicked. The appropriate app store view or
/// app browser will be launched.
/// \param ad An HADVideoInterstitialAd object sending the message.
///
- (void)hadVideoInterstitialAdDidClickWithAd:(HADVideoInterstitialAd * _Nonnull)ad;
/// Sent after an HADVideoInterstitialAd object has been dismissed from the screen, returning control
/// to your application.
/// \param ad An HADVideoInterstitialAd object sending the message.
///
- (void)hadVideoInterstitialAdDidCloseWithAd:(HADVideoInterstitialAd * _Nonnull)ad;
/// Sent immediately before an HADVideoInterstitialAd object will be dismissed from the screen.
/// \param ad An HADVideoInterstitialAd object sending the message.
///
- (void)hadVideoInterstitialAdWillCloseWithAd:(HADVideoInterstitialAd * _Nonnull)ad;
@end

@protocol HADVideoRewardedAdDelegate;

SWIFT_CLASS("_TtC12HADFramework18HADVideoRewardedAd")
@interface HADVideoRewardedAd : HADVideoFullscreen
/// The customer id for s2s rewarding
@property (nonatomic, copy) NSString * _Nullable customerID;
/// The delegate
@property (nonatomic, weak) id <HADVideoRewardedAdDelegate> _Nullable delegate;
- (nonnull instancetype)initWithPlacementID:(NSString * _Nonnull)placementID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The methods declared by the HADVideoInterstitialAdDelegate protocol allow the adopting delegate to respond
/// to messages from the HADVideoInterstitialAd class and thus respond to operations such as whether the
/// interstitial ad has been loaded, user has clicked or closed the interstitial.
SWIFT_PROTOCOL("_TtP12HADFramework26HADVideoRewardedAdDelegate_")
@protocol HADVideoRewardedAdDelegate
@optional
/// Sent when an HADVideoRewardedAd failes to load an ad.
/// \param ad An HADVideoRewardedAd object sending the message.
///
/// \param error An error object containing details of the error.
///
- (void)hadVideoRewardedAdDidFailWithAd:(HADVideoRewardedAd * _Nonnull)ad withError:(NSError * _Nullable)error;
/// Sent when an HADVideoRewardedAd successfully loads an ad.
/// \param ad An HADVideoRewardedAd object sending the message.
///
- (void)hadVideoRewardedAdDidLoadWithAd:(HADVideoRewardedAd * _Nonnull)ad;
/// Sent after an ad in the HADVideoRewardedAd object is clicked. The appropriate app store view or
/// app browser will be launched.
/// \param ad An HADVideoRewardedAd object sending the message.
///
- (void)hadVideoRewardedAdDidClickWithAd:(HADVideoRewardedAd * _Nonnull)ad;
/// Sent after an HADVideoRewardedAd object has been dismissed from the screen, returning control
/// to your application.
/// \param ad An HADVideoRewardedAd object sending the message.
///
- (void)hadVideoRewardedAdDidCloseWithAd:(HADVideoRewardedAd * _Nonnull)ad;
/// Sent immediately before an HADVideoRewardedAd object will be dismissed from the screen.
/// \param ad An HADVideoRewardedAd object sending the message.
///
- (void)hadVideoRewardedAdWillCloseWithAd:(HADVideoRewardedAd * _Nonnull)ad;
- (void)hadVideoRewardedAdCompleteWithAd:(HADVideoRewardedAd * _Nonnull)ad reward:(HADReward * _Nonnull)reward;
@end


SWIFT_CLASS("_TtC12HADFramework15PauseButtonView")
@interface PauseButtonView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC12HADFramework14PlayButtonView")
@interface PlayButtonView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
@end

@class CAMediaTimingFunction;

SWIFT_CLASS("_TtC12HADFramework18RPCircularProgress")
@interface RPCircularProgress : UIView
/// The color of the empty progress track (gets drawn over)
@property (nonatomic, strong) UIColor * _Nonnull trackTintColor;
/// The color of the progress bar
@property (nonatomic, strong) UIColor * _Nonnull progressTintColor;
/// The color the notched out circle within the progress area (if there is one)
@property (nonatomic, strong) UIColor * _Nullable innerTintColor;
/// Sets whether or not the corners of the progress bar should be rounded
@property (nonatomic) BOOL roundedCorners;
/// Sets how thick the progress bar should be (pinned between <code>0.01</code> and <code>1</code>)
@property (nonatomic) CGFloat thicknessRatio;
/// Sets whether or not the animation should be clockwise
@property (nonatomic) BOOL clockwiseProgress;
/// A timing function defining the pacing of the animation. Defaults to ease in, ease out.
@property (nonatomic, strong) CAMediaTimingFunction * _Nonnull timingFunction;
/// Getter for the current progress (not observed from any active animations)
@property (nonatomic, readonly) CGFloat progress;
/// Sets how much of the progress bar should be filled during an indeterminate animation, pinned between <code>0.05</code> and <code>0.9</code>
/// <em>Note:</em> This can be overriden / animated from by using updateProgress(…)
@property (nonatomic) CGFloat indeterminateProgress;
/// Controls the speed at which the indeterminate progress bar animates
@property (nonatomic) CFTimeInterval indeterminateDuration;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// Default initializer for the class
///
/// returns:
/// A configured instance of self
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToWindow;
/// Enables or disables the indeterminate (spinning) animation
/// \param enabled Whether or not to enable the animation (defaults to <code>true</code>)
///
/// \param completion An optional closure to execute after the animation completes
///
- (void)enableIndeterminate:(BOOL)enabled completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class CAAnimation;

@interface RPCircularProgress (SWIFT_EXTENSION(HADFramework)) <CAAnimationDelegate>
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end


@interface RPCircularProgress (SWIFT_EXTENSION(HADFramework))
@end


@interface UIView (SWIFT_EXTENSION(HADFramework))
@end


@interface UIWindow (SWIFT_EXTENSION(HADFramework))
@property (nonatomic, readonly, strong) UIViewController * _Nullable topVisibleViewController;
+ (UIViewController * _Nullable)getVisibleViewControllerFromVc:(UIViewController * _Nullable)vc SWIFT_WARN_UNUSED_RESULT;
@end

#pragma clang diagnostic pop
